using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ProjectEulerSolutions
{
    class Problem12
    {
        /*The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

        1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

        Let us list the factors of the first seven triangle numbers:

         1: 1
         3: 1,3
         6: 1,2,3,6
        10: 1,2,5,10
        15: 1,3,5,15
        21: 1,3,7,21
        28: 1,2,4,7,14,28
        We can see that 28 is the first triangle number to have over five divisors.

        What is the value of the first triangle number to have over five hundred divisors?*/

        private int[] primeNums = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37 };
        private int[] primePowers;

        public Problem12()
        {
            int mostDivisors = 2;
            int highestDivisors = 0;
            int index = 1;
            int num = 0;

            primePowers = new int[primeNums.Length];

            while (mostDivisors < 500)
            {
                num = 0;

                for (int i = 1; i <= index; i++)
                {
                    num += i;
                }

                Factor(num);

                int divisors = 0;

                foreach (int j in primePowers)
                {
                    if (divisors == 0)
                        divisors = j;
                    else if (j >= 1)
                        divisors *= j;
                }

                if (divisors > mostDivisors)
                {
                    mostDivisors = divisors;
                    highestDivisors = num;
                }

                index++;
            }


            Console.WriteLine("Result: " + highestDivisors);
        }

        private void Factor(int _n)
        {
            int n = _n;
            for (int i = 0; i < primeNums.Length; i++)
            {
                primePowers[i] = 1;

                while (n % primeNums[i] == 0)
                {
                    n /= primeNums[i];
                    primePowers[i]++;
                }

                if (n == 0)
                    break;
            }
        }
    }
}
